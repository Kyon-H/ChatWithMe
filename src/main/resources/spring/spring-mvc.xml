<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    

    <!-- 扫描注解 过滤掉Service和Repository，只扫描Controller -->
    <context:component-scan base-package="com.main" >
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>
<!-- 	<mvc:default-servlet-handler />  -->
    <!--配置静态资源-->
    <mvc:resources location="/static/js/" mapping="/js/**"/>
    <mvc:resources location="/static/img/" mapping="/img/**"/>
    <mvc:resources location="/static/css/" mapping="/css/**"/>
    <mvc:resources location="/static/i/" mapping="/i/**"/>
    <mvc:resources location="/static/fonts/" mapping="/fonts/**"/>
    <mvc:resources location="/static/ueditor/" mapping="/ueditor/**"/>

    <!--配置SpringMVC注解对应的内容-->
    <!--这个是RequestMappingHandlerMapping拦截器，对应即为Controller前面的@RequestMapping注解-->
    <!--HandlerMapping 作用如下：
        SpringMVC工作过程中，DispatcherServlet收到请求之后会把请求交给HandlerMapping，
        HandlerMapping根据配置（此处为注解）找到请求对应的Handler-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>

    <!--这个是RequestMappingHandlerAdapter-->
    <!--HandlerAdapter 作用如下：
        SpringMVC工作过程中，HandlerMapping找到Handler，Handler对具体的处理（Controller）进行封装，
        然后由HandlerAdapter对Handler进行具体处理
        在这里我们定义了返回对象自动转换为Json数据-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="cacheSeconds" value="0"/>
        <property name="messageConverters">
            <list>
                <ref bean="mappingJackson2HttpMessageConverter"/>
                <ref bean="mappingStringHttpMessageConverter"/>
            </list>
        </property>
        <property name="webBindingInitializer" ref="webBindingInitializer">
        </property>
    </bean>

    <!--这里就是Spring对http消息格式转换提供的接口-->
    <bean id="mappingStringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!--同上-->
    <bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="application"/>
                    <constructor-arg index="1" value="json"/>
                    <constructor-arg index="2" value="UTF-8"/>
                </bean>
            </list>
        </property>
    </bean>

    <!--注册转换器到SpringMVC ，并注册在了上面的RequestMappingHandlerAdapter中-->
    <bean id="webBindingInitializer" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
        <property name="conversionService">
            <bean class="org.springframework.core.convert.support.DefaultConversionService"></bean>
        </property>
    </bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 上传文件大小上限，单位为字节（10MB） -->
		<property name="maxUploadSize">
			<value>10485760</value>
		</property>
		<!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 -->
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
	</bean>
	
    <!-- 添加viewResolver -->
    <!--viewResolver的作用是接收到返回的ModelAndView的时候把它处理成视图（jsp文件）-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="order" value="3"/>
                    <property name="prefix" value="/WEB-INF/views/" />
                    <property name="suffix" value=".jsp" />
                </bean>
            </list>
        </property>
    </bean>
    <!-- 用户登录拦截器 -->
    <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="" />
			<bean class="com.main.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>